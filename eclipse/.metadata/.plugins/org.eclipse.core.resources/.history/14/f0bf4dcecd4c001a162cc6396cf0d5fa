/*     */ package org.gradle.internal.resource.transport.http;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.URI;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.http.HttpResponse;
/*     */ import org.apache.http.client.methods.HttpGet;
/*     */ import org.apache.http.util.EntityUtils;
/*     */ import org.gradle.api.Nullable;
/*     */ import org.gradle.internal.hash.HashValue;
/*     */ import org.gradle.internal.resource.ExternalResource;
/*     */ import org.gradle.internal.resource.metadata.ExternalResourceMetaData;
/*     */ import org.gradle.internal.resource.transfer.ExternalResourceAccessor;
/*     */ import org.slf4j.Logger;
/*     */ import org.slf4j.LoggerFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HttpResourceAccessor
/*     */   implements ExternalResourceAccessor
/*     */ {
/*  38 */   private static final Logger LOGGER = LoggerFactory.getLogger(HttpResourceAccessor.class); private final HttpClientHelper http;
/*     */   
/*     */   public HttpResourceAccessor(HttpClientHelper http) {
/*  41 */     this.openResources = new ArrayList();
/*     */ 
/*     */     
/*  44 */     this.http = http;
/*     */   }
/*     */   private final List<ExternalResource> openResources;
/*     */   @Nullable
/*     */   public HttpResponseResource getResource(URI uri) throws IOException {
/*  49 */     abortOpenResources();
/*  50 */     String location = uri.toString();
/*  51 */     LOGGER.debug("Constructing external resource: {}", location);
/*     */     
/*  53 */     HttpResponse response = this.http.performGet(location);
/*  54 */     if (response != null) {
/*  55 */       HttpResponseResource resource = wrapResponse(uri, response);
/*  56 */       return recordOpenGetResource(resource);
/*     */     } 
/*     */     
/*  59 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public HttpResponseResource getRawResource(URI uri) throws IOException {
/*     */     HttpResponse response;
/*  67 */     abortOpenResources();
/*  68 */     String location = uri.toString();
/*  69 */     LOGGER.debug("Constructing external resource: {}", location);
/*     */     
/*  71 */     HttpGet httpGet = new HttpGet(uri);
/*     */     
/*     */     try {
/*  74 */       response = this.http.performHttpRequest(httpGet);
/*  75 */     } catch (IOException e) {
/*  76 */       throw new HttpRequestException(String.format("Could not %s '%s'.", new Object[] { httpGet.getMethod(), httpGet.getURI() }), e);
/*     */     } 
/*     */     
/*  79 */     HttpResponseResource resource = wrapResponse(uri, response);
/*  80 */     return recordOpenGetResource(resource);
/*     */   }
/*     */   
/*     */   public ExternalResourceMetaData getMetaData(URI uri) {
/*  84 */     abortOpenResources();
/*  85 */     String location = uri.toString();
/*  86 */     LOGGER.debug("Constructing external resource metadata: {}", location);
/*  87 */     HttpResponse response = this.http.performHead(location);
/*  88 */     return (response == null) ? null : (new HttpResponseResource("HEAD", uri, response)).getMetaData();
/*     */   }
/*     */   
/*     */   private HttpResponseResource recordOpenGetResource(HttpResponseResource httpResource) {
/*  92 */     this.openResources.add(httpResource);
/*  93 */     return httpResource;
/*     */   }
/*     */   
/*     */   private void abortOpenResources() {
/*  97 */     for (ExternalResource openResource : this.openResources) {
/*  98 */       LOGGER.warn("Forcing close on abandoned resource: " + openResource);
/*     */       try {
/* 100 */         openResource.close();
/* 101 */       } catch (IOException e) {
/* 102 */         LOGGER.warn("Failed to close abandoned resource", e);
/*     */       } 
/*     */     } 
/* 105 */     this.openResources.clear();
/*     */   }
/*     */   
/*     */   public HashValue getResourceSha1(URI location) {
/* 109 */     String checksumUrl = location + ".sha1";
/* 110 */     return downloadSha1(checksumUrl);
/*     */   }
/*     */   
/*     */   private HashValue downloadSha1(String checksumUrl) {
/*     */     try {
/* 115 */       HttpResponse httpResponse = this.http.performRawGet(checksumUrl);
/* 116 */       if (this.http.wasSuccessful(httpResponse)) {
/* 117 */         String checksumValue = EntityUtils.toString(httpResponse.getEntity());
/* 118 */         return HashValue.parse(checksumValue);
/*     */       } 
/* 120 */       if (!this.http.wasMissing(httpResponse)) {
/* 121 */         LOGGER.info("Request for checksum at {} failed: {}", checksumUrl, httpResponse.getStatusLine());
/*     */       }
/* 123 */       return null;
/* 124 */     } catch (Exception e) {
/* 125 */       LOGGER.warn("Checksum missing at {} due to: {}", checksumUrl, e.getMessage());
/* 126 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   private HttpResponseResource wrapResponse(URI uri, HttpResponse response) {
/* 131 */     return new HttpResponseResource("GET", uri, response)
/*     */       {
/*     */         public void close() {
/* 134 */           super.close();
/* 135 */           HttpResourceAccessor.this.openResources.remove(this);
/*     */         }
/*     */       };
/*     */   }
/*     */ }


/* Location:              C:\Users\hugo\.gradle\wrapper\dists\gradle-2.0-bin\5h57m9vra0mjv9qs45oqtsb5c0\gradle-2.0\lib\plugins\gradle-resources-http-2.0.jar!\org\gradle\internal\resource\transport\http\HttpResourceAccessor.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.0.7
 */